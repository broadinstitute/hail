apiVersion: v1
kind: ServiceAccount
metadata:
  name: router-resolver
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: view-services
rules:
- apiGroups: [""]
  resources: ["services"]
  verbs: ["get", "list", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: router-resolver-view-service
subjects:
- kind: ServiceAccount
  name: router-resolver
  namespace: default
roleRef:
  kind: ClusterRole
  name: view-services
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: router-resolver
  labels:
    app: router-resolver
    hail.is/sha: "{{ code.sha }}"
spec:
  selector:
    matchLabels:
      app: router-resolver
  replicas: 3
  template:
    metadata:
      labels:
        app: router-resolver
        hail.is/sha: "{{ code.sha }}"
    spec:
      serviceAccountName: router-resolver
      priorityClassName: infrastructure
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: "app"
                    operator: In
                    values:
                    - router-resolver
              topologyKey: "kubernetes.io/hostname"
      tolerations:
       - key: preemptible
         value: "true"
      containers:
       - name: router-resolver
         image: "{{ router_resolver_image.image }}"
         resources:
           requests:
             memory: "250M"
             cpu: "100m"
           limits:
             memory: "1G"
             cpu: "1"
         volumeMounts:
          - name: jwt-secret-key
            mountPath: /jwt-secret-key
            readOnly: true
         ports:
          - containerPort: 5000
      volumes:
       - name: jwt-secret-key
         secret:
           optional: false
           secretName: jwt-secret-key
---
apiVersion: v1
kind: Service
metadata:
  name: router-resolver
  labels:
    app: router-resolver
spec:
  ports:
   - port: 80
     protocol: TCP
     targetPort: 5000
  selector:
    app: router-resolver
---
apiVersion: autoscaling/v2beta1
kind: HorizontalPodAutoscaler
metadata:
  name: router-resolver
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: router-resolver
  minReplicas: 3
  maxReplicas: 10
  metrics:
   - type: Resource
     resource:
       name: cpu
       targetAverageUtilization: 80
