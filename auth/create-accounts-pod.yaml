apiVersion: v1
kind: Pod
metadata:
  name: create-accounts
spec:
  serviceAccount: admin
  containers:
  - name: create-accounts
    image: "{{ hailtop_image.image }}"
    command:
     - /bin/bash
     - -c
     - |
       set -ex
       cat > generate-session-keys.py <<EOF
       import secrets
       import base64
       from cryptography import fernet
       from hailtop import gear
       import hailtop.gear.auth
       with open('jwt-secret-key', 'wb') as f:
           f.write(gear.auth.JWTClient.generate_key())
       with open('aiohttp-session-secret-key', 'wb') as f:
           f.write(base64.urlsafe_b64decode(fernet.Fernet.generate_key()))
       EOF
       # create session keys
       python3 generate-session-keys.py
       kubectl -n {{ default_ns.name }} create secret generic session-secret-keys --from-file=./jwt-secret-key --from-file=./aiohttp-session-secret-key
       # create accounts
       cat > create-session.py <<EOF
       import sys
       import json
       import asyncio
       from hailtop.gear import create_database_pool, get_deploy_config
       from hailtop.gear.auth import get_tokens, create_user, create_session, create_session_token
       async def main():
           dbpool = await create_database_pool()
           tokens = get_tokens()
           user_spec = json.loads(sys.argv[1])
           await create_user(dbpool, user_spec)
           deploy_config = get_deploy_config()
           auth_ns = deploy_config.service_ns('auth')
           tokens[auth_ns] = create_session_token(await create_session(dbpool, user_spec['user_id']))
           tokens.write('./tokens.json')
       loop = asyncio.get_event_loop()
       loop.run_until_complete(main())
       loop.run_until_complete(loop.shutdown_asyncgens())
       EOF
       # create batch
       kubectl -n {{ default_ns.name }} get -o json --export secret test-gsa-key | jq '.metadata.name = "batch-gsa-key"' | kubectl -n {{ default_ns.name }} apply -f -
       kubectl -n {{ default_ns.name }} get -o json --export secret test-gsa-key | jq '.metadata.name = "batch-gsa-key"' | kubectl -n {{ batch_pods_ns.name }} apply -f -
       python3 create-session.py '{"username":"batch","user_id":"hail|batch","service_account":1,"gsa_email":"hail-test@hail-vdc.iam.gserviceaccount.com","bucket_name":"hail-test-1c9nm","gsa_key_secret_name":"batch-gsa-key","jwt_secret_name":"batch-jwt"}'
       kubectl -n {{ default_ns.name }} create secret generic batch-jwt --from-file=./tokens.json
       # create ci
       kubectl -n {{ default_ns.name }} get -o json --export secret test-gsa-key | jq '.metadata.name = "ci-gsa-key"' | kubectl -n {{ default_ns.name }} apply -f -
       python3 create-session.py '{"username":"ci","user_id":"hail|ci","service_account":1,"gsa_email":"hail-test@hail-vdc.iam.gserviceaccount.com","bucket_name":"hail-test-1c9nm","gsa_key_secret_name":"ci-gsa-key","jwt_secret_name":"ci-jwt"}'
       kubectl -n {{ default_ns.name }} create secret generic ci-jwt --from-file=./tokens.json
       # test
       # test-gsa-key already exists
       python3 create-session.py '{"username":"test","user_id":"hail|test","gsa_email":"hail-test@hail-vdc.iam.gserviceaccount.com","bucket_name":"hail-test-1c9nm","gsa_key_secret_name":"test-gsa-key","jwt_secret_name":"test-jwt"}'
       kubectl -n {{ batch_pods_ns.name }} create secret generic test-jwt --from-file=./tokens.json
    volumeMounts:
      - mountPath: /sql-config
        readOnly: true
        name: sql-config
      - mountPath: /deploy-config
        readOnly: true
        name: deploy-config
  volumes:
    - name: sql-config
      secret:
        secretName: "{{ users_database.user_secret_name }}"
    - name: deploy-config
      secret:
        secretName: deploy-config
  restartPolicy: Never
